<!DOCTYPE html>
<html>
    <head>
        <title>Electric Sheep - Development tests</title>
        <meta charset="utf-8"/>
        <style type="text/css">
body {
    margin: 0;
    padding: 0;
    overflow: hidden;
}
        </style>
        // libraries
		<script type="text/javascript" src="Scripts/Three.js"></script>
		<script type="text/javascript" src="Scripts/RequestAnimationFrame.js"></script>
		<script type="text/javascript" src="Scripts/EffectComposer.js"></script> 
		<script type="text/javascript" src="Scripts/ShaderExtras.js"></script> 
		<script type="text/javascript" src="Scripts/MaskPass.js"></script> 
		<script type="text/javascript" src="Scripts/RenderPass.js"></script> 
		<script type="text/javascript" src="Scripts/ShaderPass.js"></script> 

        // fonts
        <script type="text/javascript" src="Assets/droid_sans_bold.typeface.js"></script>

        // 
        <script type="text/javascript" src="Scripts/Surface.js"></script>
		<script type="text/javascript" src="Scripts/Player.js"></script>
		<script type="text/javascript" src="Scripts/Skybox.js"></script>
		<script type="text/javascript" src="Scripts/TextRendering.js"></script>
		<script type="text/javascript" src="Scripts/Keyboard.js"></script>
		<script type="text/javascript" src="Scripts/Enemies.js"></script>

		<script type="text/javascript">
		    var camera,
	            scene,
	            renderer;

            var enemies;
            var activeTarget = null;
            var noOfMistakes=0;

            // materials reused several times
            var enemyMaterial = new THREE.MeshPhongMaterial( { color: 0x750505, shininess: 20 });
            var textMaterialFront = new THREE.MeshPhongMaterial( { color: 0xffffff, shading: THREE.FlatShading } );
            var textMaterialSide = new THREE.MeshPhongMaterial( { color: 0xffffff, shading: THREE.SmoothShading } );
            var faceMaterial = new THREE.MeshFaceMaterial();

            // for the vignette effect
		    var uniforms;

		    function initialize() {
		        var grass,
                    meshCanvas,
                    plane,
                    i, j, uvs;

		        camera = new THREE.Camera(90, window.innerWidth / window.innerHeight, 1, 1000000);

				len = 1000;
//		        camera.position.x = len*Math.sin(3.14/4);
		        camera.position.y = len*Math.cos(35/180*3.14);
		        camera.position.z = 1.5*len * Math.sin(3.14/4);

		        scene = new THREE.Scene();

//		        scene.addObject(CreateTiledSurface(16,8,'Assets/TiledSurface/Map.bmp','Assets/TiledSurface/TextureMapSpace.png'));

//                CreatePlayerModel(function(group){group.position.x=800;group.position.z=800;scene.addObject( group );}, 10);

                // enable this line to switch to the skybox background
//				scene.addObject(CreateSkybox());

                // fill the scene with 'enemies'
                enemies = [];
                for (var i=0; i < dictionary.length; i++) {
                    enemies.push(new Enemy(dictionary[i], pickRandom(enemyPositionsX)*10, 120, pickRandom(enemyPositionsZ)*10));
                }

                // Lights
                var dirLight = new THREE.DirectionalLight( 0xffffff, 0.125 );
                dirLight.position.set( 0, 0, 1 );
                dirLight.position.normalize();
                scene.addLight( dirLight );

                var pointLight = new THREE.PointLight( 0xFFFFFF );
                pointLight.position.x = 10;
                pointLight.position.y = 50;
                pointLight.position.z = 280;
                scene.addLight(pointLight);


		        renderer = new THREE.WebGLRenderer({ antialias: true });
		        renderer.setSize(window.innerWidth, window.innerHeight);


				// Post Processing Filters
				renderer.setClearColorHex( 0xffffff, 1 );

				effectVignette = new THREE.ShaderPass( THREE.ShaderExtras[ "vignette" ] );
				effectVignette.uniforms[ "offset" ].value = 0.95;
				effectVignette.uniforms[ "darkness" ].value = 1.6;
	
				var renderScene = new THREE.RenderPass( scene, camera );

				composer = new THREE.EffectComposer( renderer );
				composer.addPass( renderScene );
				composer.addPass( effectVignette );
				
				effectVignette.renderToScreen = true;

		        document.body.appendChild(renderer.domElement);
		    }
		    function animate() {
		        requestAnimationFrame(animate);

		        render();
		    }

		    function render() {
				renderer.clear();
				composer.render( 0.1 );
		        //renderer.render(scene, camera);
		    }
        </script>
    </head>
    <body>
		<script type="text/javascript">
		    initialize();

		    animate();
		</script>
	</body>
</html>
